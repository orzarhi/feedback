generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum SurveyType {
  DEFINES_ALONE
  SINGLE_CHOICE
  SHORT_ANSWER
  MULTIPLE_CHOICE
}

enum QuestionType {
  SINGLE_CHOICE
  MULTIPLE_CHOICE
  SHORT_ANSWER
}

enum Satisfaction {
  VERY_SATISFIED
  SATISFIED
  NEUTRAL
  DISSATISFIED
  VERY_DISSATISFIED
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  imageUrl String?

  survey   Survey[]
  response SurveyResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Survey {
  id          String      @id @default(cuid())
  title       String
  description String?
  surveyType  SurveyType? @default(DEFINES_ALONE)
  dueDate     DateTime

  questions Question[]
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  response  SurveyResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Question {
  id           String        @id @default(cuid())
  text         String
  questionType QuestionType? @default(SINGLE_CHOICE)

  survey   Survey   @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId String
  answers  Answer[]

  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  answerResponse AnswerResponse[]
}

model Answer {
  id         String   @id @default(cuid())
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId String
  text       String

  answerResponse AnswerResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SurveyResponse {
  id           String           @id @default(cuid())
  user         User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  survey       Survey           @relation(fields: [surveyId], references: [id], onDelete: Cascade)
  surveyId     String
  answers      AnswerResponse[]
  feedback     String?
  satisfaction Satisfaction

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model AnswerResponse {
  id               String         @id @default(cuid())
  surveyResponse   SurveyResponse @relation(fields: [surveyResponseId], references: [id], onDelete: Cascade)
  surveyResponseId String
  question         Question       @relation(fields: [questionId], references: [id], onDelete: Cascade)
  questionId       String
  answer           Answer         @relation(fields: [answerId], references: [id], onDelete: Cascade)
  answerId         String
  text             String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
